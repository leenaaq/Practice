#include <iostream>
#include <vector>
#include <cstdlib>
#include <ctime>
using namespace std;

class Animal {
public:
	virtual void makeSound() = 0;
	virtual void makeMove() = 0;
	virtual ~Animal() {}
};

class Cat : public Animal {
public:
	void makeSound() {
		cout << "냥냥 ";
	}
	void makeMove() {
		cout << "냥펀치\n";
	}
};

class Dog : public Animal {
	void makeSound() {
		cout << "개개 ";
	}
	void makeMove() {
		cout << "개펀치\n";
	}
};

class Cow : public Animal {
	void makeSound() {
		cout << "소소 ";
	}
	void makeMove() {
		cout << "소무브\n";
	}
};



// - Animal 객체의 포인터를 받아 포인터 배열에 저장합니다.
// - 같은 동물이라도 여러 번 추가될 수 있습니다.
// - 입력 매개변수: Animal* (추가할 동물 객체)
// - 반환값: 없음
class Zoo {
private:
	Animal* animals[10];
	int animalCount = 0;

public:
	void addAnimal(Animal* animal) { // 동물을 동물원에 추가하는 함수
		if (animalCount < 10) {
			animals[animalCount++] = animal; 
		}
		else cout << "full\n";

	}
	

	// 동물원에 있는 모든 동물의 행동을 수행하는 함수
	// - 모든 동물 객체에 대해 순차적으로 소리를 내고 움직이는 동작을 실행합니다.
	// - 입력 매개변수: 없음
	// - 반환값: 없음
	void performActions() {
		for (int i = 0; i < animalCount; i++) {
			animals[i]->makeSound(); 
			animals[i]->makeMove();
		}
	}

	// Zoo 소멸자
	// - Zoo 객체가 소멸될 때, 동물 벡터에 저장된 모든 동물 객체의 메모리를 해제합니다.
	// - 메모리 누수를 방지하기 위해 동적 할당된 Animal 객체를 `delete` 합니다.
	// - 입력 매개변수: 없음
	// - 반환값: 없음
	~Zoo() {
		for (int i = 0; i < animalCount; i++) {
			delete animals[i]; // 동적 할당된 Animal 객체 해제
		}
		//cout << "zoo 소멸자\n";
	}
};

// 랜덤 동물을 생성하는 함수
// - 입력 매개변수: 없음
// - 반환값: Animal* (생성된 동물 객체의 포인터)
Animal* createRandomAnimal() { 
	int randomAnimal = rand() % 3; // - 0, 1, 2 중 하나의 난수를 생성하여 각각 Dog, Cat, Cow 객체 중 하나를 동적으로 생성합니다.
	if (randomAnimal == 0) {
		return new Dog(); // - 생성된 객체는 Animal 타입의 포인터로 반환됩니다.
	}
	else if (randomAnimal == 1) {
		return new Cat();
	}
	else {
		return new Cow();
	}	
}



int main() {
	ios::sync_with_stdio(0);
	cin.tie(0);
	srand(time(0));

	for (int i = 0; i < 5; i++) {
		Animal* animal = createRandomAnimal();
		animal->makeSound();
		animal->makeMove();
		delete animal; 
	}

	return 0;
}
